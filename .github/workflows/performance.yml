name: Performance Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Optimize concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.14

      - name: Install dependencies
        run: |
          uv sync --extra dev
          uv pip install pytest-benchmark memory-profiler

      - name: Run benchmarks
        run: |
          uv run pytest tests/ -v --benchmark-only --benchmark-autosave --benchmark-json=benchmark.json

      - name: Download previous benchmark data
        uses: actions/cache@v4
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Python Benchmark
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: '200%'
          comment-on-alert: true
          fail-on-alert: true
          alert-comment-cc-users: '@Dashtid'

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.14

      - name: Install dependencies
        run: |
          uv sync --extra dev
          uv pip install memory-profiler matplotlib

      - name: Profile memory usage
        run: |
          # Create memory profiling script
          cat > profile_memory.py << 'EOF'
          from memory_profiler import profile
          import pydicom
          from dicom_fuzzer.core.parser import DicomParser
          from dicom_fuzzer.core.generator import DICOMGenerator
          from dicom_fuzzer.core.mutator import DicomMutator

          @profile
          def test_parser_memory():
              """Profile DICOM parser memory usage."""
              gen = DICOMGenerator()
              dataset = gen.generate_random_dicom()
              parser = DicomParser(dataset)
              metadata = parser.extract_metadata()
              return metadata

          @profile
          def test_mutator_memory():
              """Profile DICOM mutator memory usage."""
              gen = DICOMGenerator()
              dataset = gen.generate_random_dicom()
              mutator = DicomMutator()
              mutator.start_session(dataset)
              for _ in range(100):
                  mutated = mutator.apply_mutations(dataset, num_mutations=5)
              return mutated

          if __name__ == '__main__':
              print("Memory profiling DICOM parser...")
              test_parser_memory()
              print("\nMemory profiling DICOM mutator...")
              test_mutator_memory()
          EOF

          uv run python -m memory_profiler profile_memory.py > memory-profile.txt

      - name: Upload memory profile
        uses: actions/upload-artifact@v4
        with:
          name: memory-profile
          path: memory-profile.txt

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.14

      - name: Install dependencies
        run: |
          uv sync --extra dev
          uv pip install locust

      - name: Create load test script
        run: |
          cat > locustfile.py << 'EOF'
          from locust import User, task, between
          from dicom_fuzzer.core.generator import DICOMGenerator
          from dicom_fuzzer.core.mutator import DicomMutator
          from dicom_fuzzer.core.validator import DicomValidator

          class DicomFuzzerUser(User):
              wait_time = between(0.1, 0.5)

              def on_start(self):
                  """Initialize fuzzer components."""
                  self.generator = DICOMGenerator()
                  self.mutator = DicomMutator()
                  self.validator = DicomValidator()

              @task(3)
              def generate_dicom(self):
                  """Generate random DICOM dataset."""
                  dataset = self.generator.generate_random_dicom()

              @task(5)
              def mutate_dicom(self):
                  """Mutate DICOM dataset."""
                  dataset = self.generator.generate_random_dicom()
                  self.mutator.start_session(dataset)
                  mutated = self.mutator.apply_mutations(dataset, num_mutations=5)

              @task(2)
              def validate_dicom(self):
                  """Validate DICOM dataset."""
                  dataset = self.generator.generate_random_dicom()
                  result = self.validator.validate(dataset)
          EOF

      - name: Run load test
        run: |
          uv run locust -f locustfile.py --headless --users 10 --spawn-rate 2 --run-time 60s --html load-test-report.html

      - name: Upload load test report
        uses: actions/upload-artifact@v4
        with:
          name: load-test-report
          path: load-test-report.html

  cpu-profiling:
    name: CPU Profiling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.14

      - name: Install dependencies
        run: |
          uv sync --extra dev
          uv pip install py-spy

      - name: CPU profiling with py-spy
        run: |
          # Create profiling script
          cat > cpu_profile.py << 'EOF'
          from dicom_fuzzer.core.generator import DicomGenerator
          from dicom_fuzzer.core.mutator import DicomMutator

          def main():
              gen = DicomGenerator()
              mutator = DicomMutator()

              for _ in range(1000):
                  dataset = gen.generate_random_dicom()
                  mutator.start_session(dataset)
                  mutated = mutator.apply_mutations(dataset, num_mutations=10)

          if __name__ == '__main__':
              main()
          EOF

          uv run py-spy record -o cpu-profile.svg --format speedscope -- python cpu_profile.py

      - name: Upload CPU profile
        uses: actions/upload-artifact@v4
        with:
          name: cpu-profile
          path: cpu-profile.svg

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [benchmark, memory-profiling, load-testing, cpu-profiling]
    if: always()
    steps:
      - name: Check performance status
        run: |
          echo "Performance Monitoring Summary"
          echo "=============================="
          echo "Benchmarks: ${{ needs.benchmark.result }}"
          echo "Memory Profiling: ${{ needs.memory-profiling.result }}"
          echo "Load Testing: ${{ needs.load-testing.result }}"
          echo "CPU Profiling: ${{ needs.cpu-profiling.result }}"

          if [ "${{ needs.benchmark.result }}" != "success" ]; then
            echo "Warning: Performance benchmarks did not complete successfully"
          fi

          echo "Performance monitoring completed!"
