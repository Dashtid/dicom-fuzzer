name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  lint-and-format:
    name: Lint & Format (Ruff)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run Ruff linter
        run: uv run ruff check --output-format=github dicom_fuzzer/ tests/ examples/

      - name: Run Ruff formatter
        run: uv run ruff format --check dicom_fuzzer/ tests/ examples/

  security-scan:
    name: Security Scan (Bandit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run Bandit security scan
        run: uv run bandit -c pyproject.toml -r dicom_fuzzer/

  type-check:
    name: Type Check (mypy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run mypy
        run: uv run mypy --config-file=pyproject.toml --ignore-missing-imports dicom_fuzzer/
        continue-on-error: true

  test:
    name: Test (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12', '3.13']
        exclude:
          # Test all Python versions on Linux, but only latest on macOS/Windows to reduce CI time
          - os: macos-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.13'
          - os: windows-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.13'

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run tests with parallel execution and coverage
        run: |
          uv run pytest tests/ --cov=dicom_fuzzer --cov-report=xml --cov-report=term-missing --cov-report=html --junitxml=junit.xml -v -n 4 --dist=loadscope --timeout=30
        timeout-minutes: 20

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive coverage HTML report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: htmlcov/
          retention-days: 30

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            junit.xml
            .pytest_cache/
          retention-days: 7

  coverage-comment:
    name: Coverage Comment
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run tests with coverage
        run: uv run pytest tests/ --cov=dicom_fuzzer --cov-report=xml --cov-report=term --junitxml=junit.xml -n 4 --dist=loadscope
        timeout-minutes: 20

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-xml-coverage-path: ./coverage.xml
          junitxml-path: ./junit.xml
          title: Test Coverage Report
          badge-title: Coverage
          hide-badge: false
          hide-report: false
          create-new-comment: false
          hide-comment: false
          report-only-changed-files: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, test]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.13

      - name: Build package
        run: uv build

      - name: Check package
        run: uv run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/

  all-checks-pass:
    name: All Checks Passed
    if: always()
    needs: [lint-and-format, security-scan, type-check, test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [ "${{ needs.lint-and-format.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed!"
