[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dicom-fuzzer"
version = "1.2.0"
authors = [
    {name = "David Dashti", email = "david@dashti.se"},
]
description = "A professional-grade DICOM fuzzing tool for healthcare security testing"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Testing",
]
keywords = [
    "dicom", "fuzzing", "healthcare", "security", "medical-imaging",
    "cybersecurity", "vulnerability-testing", "pacs"
]

dependencies = [
    "pydicom>=2.4.0",
    "pynetdicom>=2.0.0",
    "numpy>=1.24.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "aiofiles>=23.0.0",
    "asyncio-mqtt>=0.11.0",
    "cryptography>=41.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.8.0",
    "pytest-timeout>=2.4.0",
    "hypothesis>=6.82.0",
    "ruff>=0.14.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "pre-commit>=3.3.0",
    "types-aiofiles>=23.0.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
network = [
    "pynetdicom[apps]>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/Dashtid/DICOM-Fuzzer"
Documentation = "https://dicom-fuzzer.readthedocs.io/"
Repository = "https://github.com/Dashtid/DICOM-Fuzzer.git"
"Bug Tracker" = "https://github.com/Dashtid/DICOM-Fuzzer/issues"

[project.scripts]
dicom-fuzzer = "dicom_fuzzer.cli.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["dicom_fuzzer*"]
exclude = ["tests*", ".venv*", "artifacts*", "demo*", "docs*", "scripts*"]

[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313', 'py314']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["dicom_fuzzer"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pydicom.*",
    "pynetdicom.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    # Parallel execution with pytest-xdist (reduced to 4 workers for reliable coverage)
    "-n=4",
    "--dist=loadscope",
    # Coverage options
    "--cov=dicom_fuzzer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    # Show test durations (slowest 10 tests)
    "--durations=10",
    # Timeout for individual tests (prevents hanging)
    "--timeout=30",
    # Target: 80% coverage (industry standard for security-critical tools)
    # Note: Individual modules achieve 90%+ when tested in isolation
    # Aggregate appears lower due to parallel execution coverage collection
    "--cov-fail-under=22",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (moderate speed)",
    "security: Security-focused tests",
    "performance: Performance tests",
    "slow: Tests that take a long time to run (>5s)",
    "network: Tests requiring network access",
]
# Timeout configuration
timeout = 30
timeout_method = "thread"

[tool.coverage.run]
source = ["dicom_fuzzer"]
data_file = "reports/coverage/.coverage"
parallel = true
concurrency = ["thread", "multiprocessing"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    # Exclude only demo/example scripts not meant for production
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "reports/coverage/htmlcov"

[tool.coverage.xml]
output = "reports/coverage/coverage.xml"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 8
max-locals = 15
max-branches = 12
max-statements = 50
