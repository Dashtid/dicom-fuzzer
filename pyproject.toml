[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dicom-fuzzer"
version = "1.2.0"
authors = [
    {name = "David Dashti", email = "david@dashti.se"},
]
description = "A professional-grade DICOM fuzzing tool for healthcare security testing"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Testing",
]
keywords = [
    "dicom", "fuzzing", "healthcare", "security", "medical-imaging",
    "cybersecurity", "vulnerability-testing", "pacs"
]

dependencies = [
    "pydicom>=2.4.0",
    "pynetdicom>=2.0.0",
    "numpy>=1.24.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "tqdm>=4.66.0",           # Progress bars for CLI
    "aiofiles>=23.0.0",
    "asyncio-mqtt>=0.11.0",
    "cryptography>=41.0.0",
    "psutil>=5.9.0",
]


[project.urls]
Homepage = "https://github.com/Dashtid/DICOM-Fuzzer"
Documentation = "https://dicom-fuzzer.readthedocs.io/"
Repository = "https://github.com/Dashtid/DICOM-Fuzzer.git"
"Bug Tracker" = "https://github.com/Dashtid/DICOM-Fuzzer/issues"

[project.scripts]
dicom-fuzzer = "dicom_fuzzer.cli.main:main"

# Hatchling automatically discovers packages - no explicit configuration needed

# Dependency groups (modern uv approach - replaces [tool.uv.dev-dependencies])
[dependency-groups]
dev = [
    # Testing framework (state-of-the-art 2025)
    "pytest>=8.4.0",           # Latest pytest with improved diagnostics
    "pytest-cov>=4.1.0",       # Coverage reporting
    "pytest-asyncio>=1.2.0",   # Async test support (latest stable)
    "pytest-xdist>=3.8.0",     # Parallel test execution
    "pytest-timeout>=2.4.0",   # Test timeouts
    "pytest-benchmark>=5.0.0", # Performance regression testing
    "pytest-mock>=3.15.0",     # Better mocking utilities
    "pytest-snapshot>=0.9.0",  # Snapshot testing for outputs
    "pytest-randomly>=4.0.0",  # Random test order (finds hidden dependencies)
    "pytest-watch>=4.2.0",     # Auto-rerun tests on file changes
    "hypothesis>=6.142.0",     # Property-based testing (latest)
    # Code quality (modern tools)
    "ruff>=0.14.1",            # Fast linter/formatter (replaces black/flake8)
    "mypy>=1.13.0",            # Type checking with latest improvements
    "bandit>=1.8.0",           # Security vulnerability scanning
    "pre-commit>=4.3.0",       # Git hooks for quality gates
    "types-aiofiles>=25.0.0",  # Type stubs
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

network = [
    "pynetdicom[apps]>=2.0.0",
]

# UV configuration (modern Python package management)
[tool.uv]
# Configuration for uv package manager

# Ruff configuration (replaces black, isort, flake8, pylint)
[tool.ruff]
line-length = 88
target-version = "py311"
extend-exclude = [".venv", "build", "dist", "artifacts", ".hypothesis"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # flake8-bandit (security)
    "PT",  # flake8-pytest-style
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # function call in argument defaults
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D104",  # missing docstring in public package
    "D105",  # missing docstring in magic method
    "D107",  # missing docstring in __init__
    "D203",  # 1 blank line required before class docstring (conflicts with D211)
    "D205",  # 1 blank line required between summary and description
    "D213",  # multi-line docstring summary should start at second line (conflicts with D212)
    "D400",  # first line should end with a period (too pedantic for fuzzing code)
    "D401",  # first line should be in imperative mood (too pedantic)
    "D415",  # first line should end with punctuation (too pedantic)
    "S101",  # use of assert (acceptable in tests)
    "C408",  # unnecessary dict() call (sometimes clearer than literal)
    "N811",  # constant imported as non-constant (false positives)
    "N818",  # exception name should end in Error (too pedantic)
    "PT012",  # pytest.raises() should contain a simple statement
    "PT015",  # assertion always fails (false positives in test patterns)
    "PT017",  # found assertion on exception in except block (acceptable pattern)
    "PT018",  # assertion should be broken down (sometimes combined assertions are clearer)
    "RUF001", # ambiguous unicode character (false positives in DICOM data)
    "RUF005", # consider unpacking instead of concatenation (less readable)
    "RUF012", # mutable class attributes (intentional for dataclasses)
    "RUF013", # implicit Optional (PEP 484 compatibility)
    "RUF015", # prefer next(iter()) over single element slice (less readable)
    "RUF022", # __all__ not sorted (manual ordering is intentional)
    "RUF043", # unnecessary dict comprehension (sometimes clearer)
    "RUF059", # unpacked variable never used (acceptable in tests/examples)
    "UP028",  # yield in for loop (acceptable pattern)
    "UP036",  # outdated version block (Python 3.11+ is fine)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D", "S101", "B", "F841", "PT011"]  # Relax docstring, assert, and pytest fixture returns in tests
"examples/**/*.py" = ["D", "S"]  # Relax docstring and security rules in examples

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pydicom.*",
    "pynetdicom.*",
    "numpy.*",
]
ignore_missing_imports = true

# Pyright configuration (fast, modern type checker - 3-5x faster than mypy)
[tool.pyright]
pythonVersion = "3.11"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
exclude = [
    "**/__pycache__",
    "**/node_modules",
    ".venv",
    "build",
    "dist",
    "artifacts",
    ".hypothesis",
]
# Strictness options (gradually enable for better type safety)
reportUnusedImport = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    # Parallel execution with pytest-xdist (reduced to 4 workers for reliable coverage)
    "-n=4",
    "--dist=loadscope",
    # Coverage options
    "--cov=dicom_fuzzer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    # Show test durations (slowest 10 tests)
    "--durations=10",
    # Timeout for individual tests (prevents hanging)
    "--timeout=30",
    # Current: 59% coverage (170% improvement from 22% baseline!)
    # Target: 80% coverage (industry standard - future improvement)
    # Progress: Multiple modules at 100%, property-based tests enabled, modern stack
    "--cov-fail-under=55",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (moderate speed)",
    "security: Security-focused tests",
    "performance: Performance tests",
    "slow: Tests that take a long time to run (>5s)",
    "network: Tests requiring network access",
    "asyncio: Asynchronous tests using asyncio",
]
# Timeout configuration
timeout = 30
timeout_method = "thread"

[tool.coverage.run]
source = ["dicom_fuzzer"]
data_file = "reports/coverage/.coverage"
parallel = true
concurrency = ["thread", "multiprocessing"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    # Exclude only demo/example scripts not meant for production
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "reports/coverage/htmlcov"

[tool.coverage.xml]
output = "reports/coverage/coverage.xml"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test
