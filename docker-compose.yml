# Docker Compose for DICOM Fuzzing Infrastructure
#
# This docker-compose file orchestrates:
# - DCMTK target (dcmdump parser, dcmqrscp server)
# - Orthanc PACS server
# - Shared volumes for fuzzing inputs/outputs
#
# USAGE:
#   # Build all images
#   docker-compose build
#
#   # Start all services
#   docker-compose up -d
#
#   # Run dcmdump against a fuzzed file
#   docker-compose run --rm dcmtk fuzz-dcmdump /input/test.dcm
#
#   # Start dcmqrscp DICOM server
#   docker-compose up dcmqrscp
#
#   # Start Orthanc PACS server
#   docker-compose up orthanc
#
#   # View logs
#   docker-compose logs -f
#
#   # Stop all services
#   docker-compose down

version: '3.8'

services:
  # DCMTK - DICOM Toolkit (dcmdump parser)
  dcmtk:
    build:
      context: .
      dockerfile: docker/dcmtk/Dockerfile
      args:
        ENABLE_ASAN: "true"
        ENABLE_UBSAN: "false"
    image: dicom-fuzzer/dcmtk:latest
    container_name: dicom-fuzzer-dcmtk
    volumes:
      - ./samples:/input:ro
      - ./fuzzed:/fuzzed:ro
      - ./crashes:/crashes:rw
      - ./reports:/reports:rw
    environment:
      - ASAN_OPTIONS=detect_leaks=0:abort_on_error=1:symbolize=1
      - UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1
    # No command - use 'docker-compose run dcmtk <command>'

  # DCMTK DICOM Server (dcmqrscp)
  dcmqrscp:
    build:
      context: .
      dockerfile: docker/dcmtk/Dockerfile
    image: dicom-fuzzer/dcmtk:latest
    container_name: dicom-fuzzer-dcmqrscp
    ports:
      - "11112:11112"
    volumes:
      - ./samples:/input:ro
      - ./fuzzed:/fuzzed:ro
      - dcmqrscp-storage:/dicom/storage
    command: ["dcmqrscp", "-c", "/etc/dcmtk/dcmqrscp.cfg", "-v"]
    environment:
      - ASAN_OPTIONS=detect_leaks=0:abort_on_error=1:symbolize=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ps", "aux"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Orthanc PACS Server
  orthanc:
    build:
      context: .
      dockerfile: docker/orthanc/Dockerfile
    image: dicom-fuzzer/orthanc:latest
    container_name: dicom-fuzzer-orthanc
    ports:
      - "8042:8042"  # REST API / Web UI
      - "4242:4242"  # DICOM protocol
    volumes:
      - orthanc-db:/var/lib/orthanc/db
      - orthanc-logs:/var/log/orthanc
      - ./samples:/samples:ro
    environment:
      - ORTHANC_USERNAME=orthanc
      - ORTHANC_PASSWORD=orthanc
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/system"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  # Persistent storage for DICOM server
  dcmqrscp-storage:
    driver: local

  # Persistent storage for Orthanc database
  orthanc-db:
    driver: local

  # Orthanc logs
  orthanc-logs:
    driver: local

networks:
  default:
    name: dicom-fuzzer-network
    driver: bridge
